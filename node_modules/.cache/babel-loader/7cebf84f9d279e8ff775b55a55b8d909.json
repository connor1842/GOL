{"ast":null,"code":"var _jsxFileName = \"/var/www/React/game-of-life/src/GOLGrid.js\";\nimport React from \"react\";\nimport LifeCell from \"./LifeCell\";\nconst NUM_ROWS = 10;\nconst NUM_COLS = 10;\n\nclass GOLGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      childStates: []\n    };\n    this.generateChildStates = this.generateChildStates.bind(this);\n    this.generateChildren = this.generateChildren.bind(this);\n    this.changeChildState = this.changeChildState.bind(this);\n    this.LifeGrid = this.LifeGrid.bind(this);\n    this.generateChildStates();\n  }\n\n  generateChildStates() {\n    for (var i = 0; i < NUM_ROWS; i++) {\n      const row = [];\n\n      for (var j = 0; j < NUM_COLS; j++) {\n        row[j] = false;\n      }\n\n      this.state.childStates[i] = row;\n    }\n  }\n\n  changeChildState(row, column) {\n    console.log(\"clicked in parent at row \" + row + \", column \" + column);\n    let newStates = [...this.state.childStates];\n    newStates[row][column] = !newStates[row][column];\n    this.setState({\n      childStates: newStates\n    });\n  }\n\n  LifeGrid(props) {\n    var columnString = \"\";\n\n    for (var i = 0; i < NUM_COLS; i++) columnString += \"auto \";\n\n    const divStyle = {\n      \"width\": \"50%\",\n      \"display\": \"grid\",\n      \"grid-template-columns\": columnString,\n      \"padding\": \"2px\",\n      \"margin-left\": \"25%\"\n    };\n    console.log(this.state.childStates);\n    return React.createElement(\"div\", {\n      id: \"MainGrid\",\n      style: divStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(this.generateChildren, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }));\n  }\n\n  generateChildren(props) {\n    let arr = [];\n\n    for (var i = 0; i < NUM_ROWS; i++) {\n      const row = [];\n\n      for (var j = 0; j < NUM_COLS; j++) {\n        row[j] = React.createElement(LifeCell, {\n          alive: this.state.childStates[i][j],\n          row: i,\n          column: j,\n          report: this.changeChildState,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        });\n      }\n\n      arr[i] = row;\n    }\n\n    const retval = arr;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, retval);\n  }\n\n  render() {\n    return React.createElement(this.LifeGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default GOLGrid;","map":{"version":3,"sources":["/var/www/React/game-of-life/src/GOLGrid.js"],"names":["React","LifeCell","NUM_ROWS","NUM_COLS","GOLGrid","Component","constructor","props","state","childStates","generateChildStates","bind","generateChildren","changeChildState","LifeGrid","i","row","j","column","console","log","newStates","setState","columnString","divStyle","arr","retval","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport LifeCell from \"./LifeCell\";\n\nconst NUM_ROWS = 10;\nconst NUM_COLS = 10;\n\n\nclass GOLGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    \tchildStates: []\n    };\n\n    this.generateChildStates = this.generateChildStates.bind(this);\n    this.generateChildren = this.generateChildren.bind(this);\n    this.changeChildState = this.changeChildState.bind(this);\n    this.LifeGrid         = this.LifeGrid.bind(this);\n\n    this.generateChildStates();\n  }\n\n  generateChildStates() {\n  \tfor (var i = 0; i < NUM_ROWS; i++) {\n  \t\tconst row = [];\n  \t\tfor (var j = 0; j < NUM_COLS; j++) {\n  \t\t\trow[j] = false;\n  \t\t}\n  \t\tthis.state.childStates[i] = row;\n  \t}\n  }\n\n  changeChildState(row, column) {\n  \tconsole.log(\"clicked in parent at row \" + row + \", column \" + column);\n  \tlet newStates = [...this.state.childStates];\n  \tnewStates[row][column] = !newStates[row][column];\n  \tthis.setState({\n  \t\tchildStates: newStates\n  \t});\n  }\n\n  LifeGrid(props) {\n  \tvar columnString = \"\";\n  \tfor (var i = 0; i < NUM_COLS; i++) columnString += \"auto \";\n  \tconst divStyle = { \n  \t\t\"width\": \"50%\",\n  \t\t\"display\": \"grid\",\n  \t\t\"grid-template-columns\": columnString,\n  \t\t\"padding\": \"2px\",\n  \t\t\"margin-left\": \"25%\"\n  \t};\n  \tconsole.log(this.state.childStates);\n  \treturn (\n  \t\t<div id=\"MainGrid\" style={divStyle} >\n  \t\t\t<this.generateChildren />\n  \t\t</div>\n  \t);\n  }\n\n  generateChildren(props) {\n  \tlet arr = [];\n  \tfor (var i = 0; i < NUM_ROWS; i++) {\n  \t\tconst row = [];\n  \t\tfor (var j = 0; j < NUM_COLS; j++) {\n  \t\t\trow[j] = (<LifeCell \n  \t\t\t\t\t\talive={this.state.childStates[i][j]} \n  \t\t\t\t\t\trow={i} \n  \t\t\t\t\t\tcolumn={j} \n  \t\t\t\t\t\treport={this.changeChildState} \n  \t\t\t\t\t />);\n  \t\t}\n  \t\tarr[i] = row;\n  \t}\n  \tconst retval = arr;\n  \treturn (<div>\n  \t\t\t\t{retval}\n  \t\t\t\t</div>);\n  }\n\n  render() {\n  \treturn (\n  \t\t<this.LifeGrid />\n  \t);\n  }\n\n}\n\nexport default GOLGrid;"]},"metadata":{},"sourceType":"module"}