{"ast":null,"code":"var _jsxFileName = \"/var/www/React/game-of-life/src/GOLGrid.js\";\nimport React from \"react\";\nimport LifeCell from \"./LifeCell\";\nconst NUM_ROWS = 30;\nconst NUM_COLS = 50;\n\nclass GOLGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      children: [],\n      childStates: []\n    };\n    this.generateChildStates = this.generateChildStates.bind(this);\n    this.generateChildren = this.generateChildren.bind(this);\n    this.addChild = this.addChild.bind(this);\n    this.changeChildState = this.changeChildState.bind(this);\n    this.LifeGrid = this.LifeGrid.bind(this);\n    this.generateChildStates();\n  }\n\n  generateChildStates() {\n    for (var i = 0; i < NUM_ROWS; i++) {\n      const row = [];\n\n      for (var j = 0; j < NUM_COLS; j++) {\n        row[j] = false;\n      }\n\n      this.state.childStates[i] = row;\n    }\n  }\n\n  generateChildren() {\n    for (var i = 0; i < NUM_ROWS; i++) {\n      const row = [];\n\n      for (var j = 0; j < NUM_COLS; j++) {\n        row[j] = React.createElement(LifeCell, {\n          alive: this.state.childStates[i][j],\n          row: i,\n          column: j,\n          report: (rows, columns) => {\n            this.changeChildState(rows, columns);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        });\n      }\n\n      this.addChild(row);\n    }\n  }\n\n  addChild(item) {\n    const newChildren = [...this.state.children, item];\n    this.setState({\n      children: newChildren\n    });\n  }\n\n  changeChildState(row, column) {\n    let newStates = [...this.state.childStates];\n    newStates[row][column] = !newStates[row][column];\n    this.setState({\n      childStates: newStates\n    });\n  }\n\n  LifeGrid(props) {\n    this.generateChildren();\n    const grid = this.state.children;\n    var columnString = \"\";\n\n    for (var i = 0; i < NUM_COLS; i++) columnString += \"auto \";\n\n    const divStyle = {\n      width: \"50%\",\n      display: \"grid\",\n      \"grid-template-columns\": columnString,\n      padding: \"2px\",\n      \"margin-left\": \"25%\"\n    };\n    return React.createElement(\"div\", {\n      id: \"MainGrid\",\n      style: divStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, grid);\n  }\n\n  render() {\n    return React.createElement(this.LifeGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default GOLGrid;","map":{"version":3,"sources":["/var/www/React/game-of-life/src/GOLGrid.js"],"names":["React","LifeCell","NUM_ROWS","NUM_COLS","GOLGrid","Component","constructor","props","state","children","childStates","generateChildStates","bind","generateChildren","addChild","changeChildState","LifeGrid","i","row","j","rows","columns","item","newChildren","setState","column","newStates","grid","columnString","divStyle","width","display","padding","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport LifeCell from \"./LifeCell\";\n\nconst NUM_ROWS = 30;\nconst NUM_COLS = 50;\n\n\nclass GOLGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    \tchildren:    [],\n    \tchildStates: []\n    };\n\n    this.generateChildStates = this.generateChildStates.bind(this);\n    this.generateChildren = this.generateChildren.bind(this);\n    this.addChild         = this.addChild.bind(this);\n    this.changeChildState = this.changeChildState.bind(this);\n    this.LifeGrid         = this.LifeGrid.bind(this);\n\n    this.generateChildStates();\n  }\n\n  generateChildStates() {\n  \tfor (var i = 0; i < NUM_ROWS; i++) {\n  \t\tconst row = [];\n  \t\tfor (var j = 0; j < NUM_COLS; j++) {\n  \t\t\trow[j] = false;\n  \t\t}\n  \t\tthis.state.childStates[i] = row;\n  \t}\n  }\n\n  generateChildren() {\n  \tfor (var i = 0; i < NUM_ROWS; i++) {\n  \t\tconst row = [];\n  \t\tfor (var j = 0; j < NUM_COLS; j++) {\n  \t\t\trow[j] = <LifeCell \n  \t\t\t\t\t\talive={this.state.childStates[i][j]} \n  \t\t\t\t\t\trow={i} \n  \t\t\t\t\t\tcolumn={j} \n  \t\t\t\t\t\treport={(rows, columns) => {this.changeChildState(rows, columns)} } \n  \t\t\t\t\t />\n  \t\t}\n  \t\tthis.addChild(row);\n  \t}\n  }\n\n  addChild(item) {\n  \tconst newChildren = [...this.state.children, item];\n  \tthis.setState({ children: newChildren });\n  }\n\n  changeChildState(row, column) {\n  \tlet newStates = [...this.state.childStates];\n  \tnewStates[row][column] = !newStates[row][column];\n  \tthis.setState({\n  \t\tchildStates: newStates\n  \t});\n  }\n\n  LifeGrid(props) {\n  \tthis.generateChildren();\n  \tconst grid = this.state.children;\n  \tvar columnString = \"\";\n  \tfor (var i = 0; i < NUM_COLS; i++) columnString += \"auto \";\n  \tconst divStyle = { \n  \t\twidth: \"50%\",\n  \t\tdisplay: \"grid\",\n  \t\t\"grid-template-columns\": columnString,\n  \t\tpadding: \"2px\",\n  \t\t\"margin-left\": \"25%\"\n  \t};\n  \treturn (\n  \t\t<div id=\"MainGrid\" style={divStyle} >{grid}</div>\n  \t);\n  }\n\n  render() {\n  \treturn (\n  \t\t<this.LifeGrid />\n  \t);\n  }\n\n}\n\nexport default GOLGrid;"]},"metadata":{},"sourceType":"module"}