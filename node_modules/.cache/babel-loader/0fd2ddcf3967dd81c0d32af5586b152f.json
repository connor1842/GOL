{"ast":null,"code":"var _jsxFileName = \"/var/www/React/game-of-life/src/GOLGrid.js\";\nimport React from \"react\";\nimport LifeCell from \"./LifeCell\";\nconst NUM_ROWS = 30;\nconst NUM_COLS = 20;\n\nclass GOLGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      children: []\n    };\n    this.generateChildren = this.generateChildren.bind(this);\n    this.addChild = this.addChild.bind(this);\n    this.LifeGrid = this.LifeGrid.bind(this);\n    this.generateChildren();\n  }\n\n  generateChildren() {\n    for (var i = 0; i < NUM_ROWS; i++) {\n      const row = [];\n\n      for (var j = 0; j < NUM_COLS; j++) {\n        row[j] = [i, j];\n      }\n\n      this.state.children[i] = row;\n      console.log(row);\n    }\n  }\n\n  addChild(item) {\n    const newChildren = [...this.state.children, item];\n    this.setState({\n      children: newChildren\n    });\n  }\n\n  LifeGrid(props) {\n    let grid = [];\n\n    for (var i = 0; i < NUM_ROWS; i++) {\n      for (var j = 0; j < NUM_COLS; j++) {\n        grid[i] = this.state.children[i][j];\n      }\n    }\n\n    const newreturn = this.state.children;\n    return {\n      newreturn\n    };\n  }\n\n  render() {\n    return React.createElement(this.LifeGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default GOLGrid;","map":{"version":3,"sources":["/var/www/React/game-of-life/src/GOLGrid.js"],"names":["React","LifeCell","NUM_ROWS","NUM_COLS","GOLGrid","Component","constructor","props","state","children","generateChildren","bind","addChild","LifeGrid","i","row","j","console","log","item","newChildren","setState","grid","newreturn","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,QAAQ,GAAG,EAAjB;;AAGA,MAAMC,OAAN,SAAsBJ,KAAK,CAACK,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,QAAQ,EAAE;AADE,KAAb;AAIA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACA,SAAKC,QAAL,GAAwB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAxB;AACA,SAAKE,QAAL,GAAwB,KAAKA,QAAL,CAAcF,IAAd,CAAmB,IAAnB,CAAxB;AAEA,SAAKD,gBAAL;AACD;;AAEDA,EAAAA,gBAAgB,GAAG;AAClB,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,QAApB,EAA8BY,CAAC,EAA/B,EAAmC;AAClC,YAAMC,GAAG,GAAG,EAAZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,QAApB,EAA8Ba,CAAC,EAA/B,EAAmC;AAClCD,QAAAA,GAAG,CAACC,CAAD,CAAH,GAAS,CAACF,CAAD,EAAIE,CAAJ,CAAT;AACA;;AACD,WAAKR,KAAL,CAAWC,QAAX,CAAoBK,CAApB,IAAyBC,GAAzB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA;AACD;;AAEDH,EAAAA,QAAQ,CAACO,IAAD,EAAO;AACd,UAAMC,WAAW,GAAG,CAAC,GAAG,KAAKZ,KAAL,CAAWC,QAAf,EAAyBU,IAAzB,CAApB;AACA,SAAKE,QAAL,CAAc;AAAEZ,MAAAA,QAAQ,EAAEW;AAAZ,KAAd;AACA;;AAEDP,EAAAA,QAAQ,CAACN,KAAD,EAAQ;AACf,QAAIe,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,QAApB,EAA8BY,CAAC,EAA/B,EAAmC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,QAApB,EAA8Ba,CAAC,EAA/B,EAAmC;AAClCM,QAAAA,IAAI,CAACR,CAAD,CAAJ,GAAU,KAAKN,KAAL,CAAWC,QAAX,CAAoBK,CAApB,EAAuBE,CAAvB,CAAV;AACA;AACD;;AACD,UAAMO,SAAS,GAAG,KAAKf,KAAL,CAAWC,QAA7B;AACA,WACC;AAACc,MAAAA;AAAD,KADD;AAGA;;AAEDC,EAAAA,MAAM,GAAG;AACR,WACC,yBAAM,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAGA;;AA/CmC;;AAmDtC,eAAepB,OAAf","sourcesContent":["import React from \"react\";\nimport LifeCell from \"./LifeCell\";\n\nconst NUM_ROWS = 30;\nconst NUM_COLS = 20;\n\n\nclass GOLGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    \tchildren: []\n    };\n\n    this.generateChildren = this.generateChildren.bind(this);\n    this.addChild         = this.addChild.bind(this);\n    this.LifeGrid         = this.LifeGrid.bind(this);\n\n    this.generateChildren();\n  }\n\n  generateChildren() {\n  \tfor (var i = 0; i < NUM_ROWS; i++) {\n  \t\tconst row = [];\n  \t\tfor (var j = 0; j < NUM_COLS; j++) {\n  \t\t\trow[j] = [i, j];\n  \t\t}\n  \t\tthis.state.children[i] = row;\n  \t\tconsole.log(row);\n  \t}\n  }\n\n  addChild(item) {\n  \tconst newChildren = [...this.state.children, item];\n  \tthis.setState({ children: newChildren });\n  }\n\n  LifeGrid(props) {\n  \tlet grid = [];\n  \tfor (var i = 0; i < NUM_ROWS; i++) {\n  \t\tfor (var j = 0; j < NUM_COLS; j++) {\n  \t\t\tgrid[i] = this.state.children[i][j];\n  \t\t}\n  \t}\n  \tconst newreturn = this.state.children;\n  \treturn (\n  \t\t{newreturn}\n  \t);\n  }\n\n  render() {\n  \treturn (\n  \t\t<this.LifeGrid />\n  \t);\n  }\n\n}\n\nexport default GOLGrid"]},"metadata":{},"sourceType":"module"}