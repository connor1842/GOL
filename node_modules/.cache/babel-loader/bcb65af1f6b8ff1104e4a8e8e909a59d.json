{"ast":null,"code":"var _jsxFileName = \"/var/www/React/game-of-life/src/GOLGrid.js\";\nimport React from \"react\";\nimport LifeCell from \"./LifeCell\";\nimport Grid from '@material-ui/core/Grid';\nconst NUM_ROWS = 10;\nconst NUM_COLS = 10;\n\nfunction safeIndex(num) {\n  if (num < 0) return 10 + (num - 1);\n  if (num > 9) return num % 10;\n  return num;\n}\n\nclass GOLGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      childStates: [],\n      running: false\n    };\n    this.generateChildren = this.generateChildren.bind(this);\n    this.changeChildState = this.changeChildState.bind(this);\n    this.LifeGrid = this.LifeGrid.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.calculateLife = this.calculateLife.bind(this);\n    this.getLivingNeighbors = this.getLivingNeighbors.bind(this);\n    this.calcLifeState = this.calcLifeState.bind(this);\n\n    for (var i = 0; i < NUM_ROWS; i++) {\n      const row = [];\n\n      for (var j = 0; j < NUM_COLS; j++) {\n        row[j] = false;\n      }\n\n      this.state.childStates[i] = row;\n    }\n\n    window.setInterval(this.calculateLife, 1000);\n  }\n\n  calculateLife() {\n    if (!this.state.running) return;\n    let newStates = [...this.state.childStates];\n\n    for (var i = 0; i < NUM_ROWS; i++) {\n      for (var j = 0; j < NUM_COLS; j++) {\n        let numNeighbors = this.getLivingNeighbors(i, j);\n        let lifeStatus = this.calcLifeState(newStates[i][j], numNeighbors);\n        newStates[i][j] = lifeStatus;\n      }\n    }\n\n    this.setState({\n      childStates: newStates\n    });\n  }\n\n  getLivingNeighbors(row, col) {\n    return this.state.childStates[safeIndex(row + 1)][col] + this.state.childStates[safeIndex(row - 1)][col] + this.state.childStates[safeIndex(row + 1)][safeIndex(col + 1)] + this.state.childStates[safeIndex(row - 1)][safeIndex(col + 1)] + this.state.childStates[safeIndex(row - 1)][safeIndex(col - 1)] + this.state.childStates[safeIndex(row + 1)][safeIndex(col + 1)] + this.state.childStates[row][safeIndex(col + 1)] + this.state.childStates[row][safeIndex(col - 1)];\n  }\n\n  calcLifeState(currentState, livingNeighbors) {\n    if (currentState === false && livingNeighbors === 3) return true;\n    if (currentState === true) if (livingNeighbors === 2 || livingNeighbors === 3) return true;\n    return false;\n  }\n\n  changeChildState(row, column) {\n    let newStates = [...this.state.childStates];\n    newStates[row][column] = !newStates[row][column];\n    this.setState({\n      childStates: newStates\n    });\n  }\n\n  handleClick() {\n    this.setState({\n      running: !this.state.running\n    });\n  }\n\n  LifeGrid(props) {\n    var columnString = \"\"; //  \tfor (var i = 0; i < NUM_COLS; i++) columnString += \"auto \";\n    //  \tconst divStyle = { \n    //  \t\t\"width\": \"50%\",\n    //  \t\t\"display\": \"grid\",\n    //  \t\t\"gridTemplateColumns\": columnString,\n    //  \t\t\"padding\": \"2px\",\n    //  \t\t\"marginLeft\": \"25%\"\n    //  \t};\n\n    const gridStyle = {\n      display: 'grid',\n      width: \"80%\",\n      marginLeft: \"10%\",\n      gridTemplateColumns: \"auto auto auto auto auto auto auto auto auto auto\",\n      gridGap: 1\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      id: \"MainGrid\",\n      container: true,\n      spacing: 3,\n      direction: \"column\",\n      style: gridStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(this.generateChildren, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.state.running ? \"Stop\" : \"Start\"));\n  }\n\n  generateChildren(props) {\n    let arr = [];\n\n    for (var i = 0; i < NUM_ROWS; i++) {\n      const row = [];\n\n      for (var j = 0; j < NUM_COLS; j++) {\n        row[j] = React.createElement(LifeCell, {\n          alive: this.state.childStates[i][j],\n          row: i,\n          column: j,\n          report: this.changeChildState,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        });\n      }\n\n      arr[i] = row;\n    }\n\n    const retval = arr;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, retval);\n  }\n\n  render() {\n    return React.createElement(this.LifeGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default GOLGrid;","map":{"version":3,"sources":["/var/www/React/game-of-life/src/GOLGrid.js"],"names":["React","LifeCell","Grid","NUM_ROWS","NUM_COLS","safeIndex","num","GOLGrid","Component","constructor","props","state","childStates","running","generateChildren","bind","changeChildState","LifeGrid","handleClick","calculateLife","getLivingNeighbors","calcLifeState","i","row","j","window","setInterval","newStates","numNeighbors","lifeStatus","setState","col","currentState","livingNeighbors","column","columnString","gridStyle","display","width","marginLeft","gridTemplateColumns","gridGap","arr","retval","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport LifeCell from \"./LifeCell\";\nimport Grid from '@material-ui/core/Grid';\n\nconst NUM_ROWS = 10;\nconst NUM_COLS = 10;\n\nfunction safeIndex(num)\n{\n  if (num < 0)\n    return 10 + (num - 1);\n  if (num > 9)\n    return (num % 10);\n  return num;\n}\n\n\nclass GOLGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    \tchildStates: [],\n      running: false\n    };\n\n    this.generateChildren   = this.generateChildren.bind(this);\n    this.changeChildState   = this.changeChildState.bind(this);\n    this.LifeGrid           = this.LifeGrid.bind(this);\n    this.handleClick        = this.handleClick.bind(this);\n    this.calculateLife      = this.calculateLife.bind(this);\n    this.getLivingNeighbors = this.getLivingNeighbors.bind(this);\n    this.calcLifeState      = this.calcLifeState.bind(this);\n\n    for (var i = 0; i < NUM_ROWS; i++) {\n      const row = [];\n      for (var j = 0; j < NUM_COLS; j++) {\n        row[j] = false;\n      }\n      this.state.childStates[i] = row;\n    }\n\n    window.setInterval(this.calculateLife, 1000);\n  }\n\n  calculateLife()\n  {\n    if (!this.state.running)\n      return;\n    let newStates = [...this.state.childStates];\n    for (var i = 0; i < NUM_ROWS; i++)\n    {\n      for (var j = 0; j < NUM_COLS; j++)\n      {\n        let numNeighbors = this.getLivingNeighbors(i, j);\n        let lifeStatus = this.calcLifeState(newStates[i][j], numNeighbors);\n        newStates[i][j] = lifeStatus;\n      }\n    }\n    this.setState({childStates: newStates});\n  }\n\n  getLivingNeighbors(row, col)\n  {\n    return (\n        this.state.childStates[safeIndex(row + 1)][col] +\n        this.state.childStates[safeIndex(row - 1)][col] +\n        this.state.childStates[safeIndex(row + 1)][safeIndex(col + 1)] +\n        this.state.childStates[safeIndex(row - 1)][safeIndex(col + 1)] +\n        this.state.childStates[safeIndex(row - 1)][safeIndex(col - 1)] +\n        this.state.childStates[safeIndex(row + 1)][safeIndex(col + 1)] + \n        this.state.childStates[row][safeIndex(col + 1)] +\n        this.state.childStates[row][safeIndex(col - 1)]\n      );\n  }\n\n  calcLifeState(currentState, livingNeighbors)\n  {\n    if (currentState === false && livingNeighbors === 3)\n      return true;\n    if (currentState === true)\n      if (livingNeighbors === 2 || livingNeighbors === 3)\n        return true;\n    return false;\n  }\n\n  changeChildState(row, column) {\n  \tlet newStates = [...this.state.childStates];\n  \tnewStates[row][column] = !newStates[row][column];\n  \tthis.setState({\n  \t\tchildStates: newStates\n  \t});\n  }\n\n  handleClick()\n  {\n    this.setState({running: !this.state.running});\n  }\n\n  LifeGrid(props) {\n  \tvar columnString = \"\";\n//  \tfor (var i = 0; i < NUM_COLS; i++) columnString += \"auto \";\n//  \tconst divStyle = { \n//  \t\t\"width\": \"50%\",\n//  \t\t\"display\": \"grid\",\n//  \t\t\"gridTemplateColumns\": columnString,\n//  \t\t\"padding\": \"2px\",\n//  \t\t\"marginLeft\": \"25%\"\n//  \t};\n  const gridStyle = {\n    display: 'grid',\n    width: \"80%\",\n    marginLeft: \"10%\",\n    gridTemplateColumns: \"auto auto auto auto auto auto auto auto auto auto\",\n    gridGap: 1\n  };\n  \treturn (\n      <div>\n    \t\t<Grid id=\"MainGrid\" container spacing={3} direction=\"column\" style={gridStyle} >\n          <this.generateChildren />\n        </Grid>\n        <button onClick={this.handleClick}>\n          {(this.state.running) ? \"Stop\" : \"Start\"}\n        </button>\n      </div>\n  \t);\n  }\n\n  generateChildren(props) {\n  \tlet arr = [];\n  \tfor (var i = 0; i < NUM_ROWS; i++) {\n  \t\tconst row = [];\n  \t\tfor (var j = 0; j < NUM_COLS; j++) {\n  \t\t\trow[j] = (<LifeCell \n  \t\t\t\t\t\talive={this.state.childStates[i][j]} \n  \t\t\t\t\t\trow={i} \n  \t\t\t\t\t\tcolumn={j} \n  \t\t\t\t\t\treport={this.changeChildState} \n  \t\t\t\t\t />);\n  \t\t}\n  \t\tarr[i] = row;\n  \t}\n  \tconst retval = arr;\n  \treturn (<div>\n  \t\t\t\t{retval}\n  \t\t\t\t</div>);\n  }\n\n  render() {\n  \treturn (\n  \t\t<this.LifeGrid />\n  \t);\n  }\n\n}\n\nexport default GOLGrid;"]},"metadata":{},"sourceType":"module"}